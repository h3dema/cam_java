/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.blogspot.h3dema.minhawebcam;

import java.awt.event.WindowListener;
import java.awt.BorderLayout;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;

import javax.swing.JFrame;
import javax.swing.SwingUtilities;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamDiscoveryEvent;
import com.github.sarxos.webcam.WebcamListener;
import com.github.sarxos.webcam.WebcamDiscoveryListener;
import com.github.sarxos.webcam.WebcamEvent;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamPicker;
import com.github.sarxos.webcam.WebcamResolution;

import java.awt.event.ItemEvent;

import java.lang.Thread.UncaughtExceptionHandler;

/**
 *
 * @author Henrique
 */
public class MinhaWebcam extends javax.swing.JFrame implements Runnable, WindowListener, ItemListener, WebcamListener, WebcamDiscoveryListener, UncaughtExceptionHandler {

    private WebcamPicker seletor = null;
    private Webcam webcam = null;
    private WebcamPanel painel = null;


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        SwingUtilities.invokeLater(new MinhaWebcam());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        Webcam.addDiscoveryListener(this);

        setTitle("Minha webcam");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        addWindowListener(this);

        seletor = new WebcamPicker();
        seletor.addItemListener(this);
        webcam = seletor.getSelectedWebcam();

        if (null == webcam) {
            System.out.println("Não achou webcam. Saindo...");
            System.exit(1);
        }

        painel = new WebcamPanel(webcam, false);
        painel.setFPSDisplayed(true);

        add(seletor, BorderLayout.NORTH);
        add(painel, BorderLayout.CENTER);

        pack();
        setVisible(true);

        Thread t = new Thread() {
          @Override
          public void run() {
              painel.start();
          }
        };

        t.setName("exemplo do start");
        t.setDaemon(true);
        t.setUncaughtExceptionHandler(this);
        t.start();
    }

    @Override
    public void windowOpened(WindowEvent e) {

    }

    @Override
    public void windowClosing(WindowEvent e) {

    }

    @Override
    public void windowClosed(WindowEvent e) {
        webcam.close();
    }

    @Override
    public void windowIconified(WindowEvent e) {
        painel.pause();
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        painel.resume();
    }

    @Override
    public void windowActivated(WindowEvent e) {
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
    }

    @Override
    public void webcamOpen(WebcamEvent we) {

    }

    @Override
    public void webcamClosed(WebcamEvent we) {

    }

    @Override
    public void webcamDisposed(WebcamEvent we) {

    }

    @Override
    public void webcamImageObtained(WebcamEvent we) {

    }

    @Override
    public void webcamFound(WebcamDiscoveryEvent wde) {
        if (null != seletor) {
            seletor.addItem(wde.getWebcam());
        }
    }

    @Override
    public void webcamGone(WebcamDiscoveryEvent wde) {
        if (null != seletor) {
            seletor.removeItem(wde.getWebcam());
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getItem() != webcam) {
            if (null != webcam) {
                painel.stop();
                remove(painel);

                webcam.removeWebcamListener(this);
                webcam.close();

                webcam = (Webcam) e.getItem();
                webcam.setViewSize(WebcamResolution.VGA.getSize());
                webcam.addWebcamListener(this);

                painel = new WebcamPanel(webcam, false);
                painel.setFPSDisplayed(true);
                add(painel, BorderLayout.CENTER);
                pack();

                Thread t = new Thread() {
                    @Override
                    public void run(){
                        painel.start();
                    }
                };
                t.setName("Thread em changed");
                t.setDaemon(true);
                t.setUncaughtExceptionHandler(this);
                t.start();
            }
        }
    }

    @Override
    public void uncaughtException(Thread t, Throwable e) {
        System.err.println(String.format("Exceção na thread %s", t.getName()));
        e.printStackTrace();
    }
}
